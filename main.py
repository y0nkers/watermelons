import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import random
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from config import api_token, group_id
from files import arkadiy, watermelons

session = vk_api.VkApi(token = api_token)
longpoll = VkBotLongPoll(session, group_id)
isScheduled = False
chat_id = -1


def get_name(uid: int) -> str:
    data = session.method("users.get", {"user_ids": uid})[0]
    return "{} {}".format(data["first_name"], data["last_name"])


def sendMsg(id, text):
    session.method('messages.send', {'chat_id': id, 'message': text, 'random_id': 0})


def sendWatermelon(id, text, watermelon_to_send):
    session.method('messages.send', {'chat_id': id, 'message': text, 'attachment': watermelon_to_send, "random_id": 0})


def listenForEvents():
    global isScheduled, chat_id
    while True:
        try:
            for event in longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    if event.from_chat:
                        chat_id = event.chat_id
                        user = event.object.message['from_id']
                        msg = event.object.message['text'].lower()
                        if "–∞–ª–∏–º" in msg:
                            sendMsg(chat_id, '–ê–ª–∏–º - —Ö–æ—Ä–æ—à–∏–π —á–µ–ª–æ–≤–µ–∫.')
                        elif "–∞—Ä–∫–∞–¥–∏–π" in msg:
                            sendMsg(chat_id, '–±–µ–±—Ä–∞')
                        elif msg == '—Ö–æ—á—É –∞—Ä–±—É–∑' or msg == '—Ö–∞—á—É –∞—Ä–±—É–∑' or msg == '—Ö–∞—á—é –∞—Ä–±—É–∑':
                            if user == 143409911:
                                sendWatermelon(chat_id, '–ü–µ—Ä–µ—Ö–æ—á–µ—à—å, –ê—Ä–∫–∞–¥–∏–π', arkadiy)
                            else:
                                watermelon = random.randint(0, len(watermelons) - 1)
                                sendWatermelon(chat_id, f'–î–µ—Ä–∂–∏ –∞—Ä–±—É–∑, [id{user}|{get_name(user)}]',
                                               watermelons[watermelon])
                        elif msg == '!–∞—Ä–±—É–∑' and not isScheduled:
                            isScheduled = True
        except Exception as e:
            pass


def jobMorning():
    global chat_id
    arbuz = random.randint(0, len(watermelons) - 1)
    if chat_id != -1:
        sendWatermelon(chat_id, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üçâ', watermelons[arbuz])


def jobDay():
    global chat_id
    arbuz = random.randint(0, len(watermelons) - 1)
    if chat_id != -1:
        sendWatermelon(chat_id, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üçâ', watermelons[arbuz])


def jobEvening():
    global chat_id
    arbuz = random.randint(0, len(watermelons) - 1)
    if chat_id != -1:
        sendWatermelon(chat_id, '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üçâ', watermelons[arbuz])

def main():
    today = datetime.today()
    newTime = today.replace(day = today.day, hour = 10, minute = 0, second = 0, microsecond = 0) + timedelta(days = 1)
    delta = newTime - today
    secs = delta.total_seconds()
    scheduler1 = BackgroundScheduler()
    scheduler1.add_job(jobMorning, 'interval', seconds = secs)
    scheduler1.start()
    newTime = today.replace(day = today.day, hour = 14, minute = 0, second = 0, microsecond = 0) + timedelta(days = 1)
    delta = newTime - today
    secs = delta.total_seconds()
    scheduler2 = BackgroundScheduler()
    scheduler2.add_job(jobDay, 'interval', seconds = secs)
    scheduler2.start()
    newTime = today.replace(day = today.day, hour = 18, minute = 0, second = 0, microsecond = 0) + timedelta(days = 1)
    delta = newTime - today
    secs = delta.total_seconds()
    scheduler3 = BackgroundScheduler()
    scheduler3.add_job(jobEvening, 'interval', seconds = secs)
    scheduler3.start()

    listenForEvents()


if __name__ == '__main__':
    main()
